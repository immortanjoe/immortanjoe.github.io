<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 方舟的博客</title>
    <link>https://fangzhou.blog/post/</link>
    <description>Recent content in Posts on 方舟的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 10 Jul 2022 09:54:49 +0800</lastBuildDate><atom:link href="https://fangzhou.blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SrsHttpMuxEntry缓存引起的SRS内存泄漏</title>
      <link>https://fangzhou.blog/post/srs-memory-leak-caused-by-entry-cache/</link>
      <pubDate>Sun, 10 Jul 2022 09:54:49 +0800</pubDate>
      
      <guid>https://fangzhou.blog/post/srs-memory-leak-caused-by-entry-cache/</guid>
      <description>问题现象 SRS在线上运行时，内存会一直缓慢地增加 问题分析 通过valgrind分析，发现SrsHttpServeMux中的entries对象不会被释放。 如果http请求的URI频繁变化，会导致entries不断增大。 class SrsHttpServeMux : public ISrsHttpServeMux { ... // The pattern handler, to handle the http request. std::map&amp;lt;std::string, SrsHttpMuxEntry*&amp;gt; entries; ... } 我猜想，SRS设计时，只</description>
    </item>
    
    <item>
      <title>SRS如何处理RTP丢包</title>
      <link>https://fangzhou.blog/post/how-srs-deals-with-rtp-packet-loss/</link>
      <pubDate>Mon, 27 Jun 2022 22:55:22 +0800</pubDate>
      
      <guid>https://fangzhou.blog/post/how-srs-deals-with-rtp-packet-loss/</guid>
      <description>问题现象 摄像头基于GB28181协议，通过UDP推流到srs后，srs的query_channel接口无法获取视频数据的信息，video字段为null。查看srs日志，发现出现大量的”unkonw ps data“和”decode ps packet error“，并且出现Warn日志 ”requesti</description>
    </item>
    
    <item>
      <title>RTP时间戳错误引起的视频花屏</title>
      <link>https://fangzhou.blog/post/video-smearing-issue-caused-by-incorrect-rtp-timestamp/</link>
      <pubDate>Sun, 26 Jun 2022 10:41:52 +0800</pubDate>
      
      <guid>https://fangzhou.blog/post/video-smearing-issue-caused-by-incorrect-rtp-timestamp/</guid>
      <description>问题现象 第三方设备通过GB28181协议向SRS推流，通过SRS转为FLV，再由客户端播放，每隔n秒视频就会出现卡顿、花屏。 问题分析 把设备发送到SRS的数据抓包，通过wireshark分析，发现有几个明显问题： 时间间隔(Delta)异常。按照GB28181规范，视频采样频率是90</description>
    </item>
    
    <item>
      <title>快速排序的partition</title>
      <link>https://fangzhou.blog/post/quick-sort-partition/</link>
      <pubDate>Sat, 26 Mar 2022 10:55:28 +0800</pubDate>
      
      <guid>https://fangzhou.blog/post/quick-sort-partition/</guid>
      <description>前言 快速排序是几个最基本的算法之一，但是作为一个算法渣渣，我并不觉得它是一个很简单的算法。我甚至花费了很多时间反复理解、记忆、实现，但所做的一切还只是停留在理解前人思想的阶段，这不免让人感到沮丧。 代码示例 下面的快速排序是基于《算法导论》中的伪代码，通过递归实现的： func partition(nums []int, l, r int) int {</description>
    </item>
    
    <item>
      <title>Hello world</title>
      <link>https://fangzhou.blog/post/2019-03-25-start/</link>
      <pubDate>Mon, 25 Mar 2019 19:34:22 +0800</pubDate>
      
      <guid>https://fangzhou.blog/post/2019-03-25-start/</guid>
      <description>We are at the crossroads of destiny.</description>
    </item>
    
  </channel>
</rss>
